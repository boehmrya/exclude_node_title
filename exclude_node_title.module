<?php

/**
 * @file
 * Primarily Drupal hooks and global API functions to exclude node titles.
 *
 * This is the main module file for Exclude Node Title. 
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node;

/**
 * Determines if node should be hidden and user
 * has permission to have the title hidden.
 *
 * @param mixed $param
 *   Can be a node object or integer value (nid).
 * @param $view_mode
 *   View mode, e.g. 'full', 'teaser'...
 * @return bool
 *   Returns boolean TRUE if should be hidden, FALSE when not.
 */
function exclude_node_title($param, $view_mode) {
  return (\Drupal::currentUser()->hasPermission('use exclude node title') && _exclude_node_title($param, $view_mode));
}

/**
 * Implements hook_preprocess_html().
 */
function exclude_node_title_preprocess_html(&$vars) {
  if (!\Drupal::currentUser()->hasPermission('use exclude node title')) {
    return;
  }

  $route_name = \Drupal::routeMatch()->getRouteName();
  $node = \Drupal::routeMatch()->getParameter('node');

  switch ($route_name) {
    case 'entity.node.edit_form':

      _exclude_node_title_preprocess($vars, $node, 'nodeform');
      break;

    case 'entity.node.canonical':
      if (_exclude_node_title($node, 'full')) {
        $vars['head_title'] = $vars['head_title_array']['name'];
      }
      break;

  }
}

/**
  * Implements hook_preprocess_page().
  */
function exclude_node_title_preprocess_page(&$vars) {
  if (!\Drupal::currentUser()->hasPermission('use exclude node title')) {
    return;
  }

  $route_name = \Drupal::routeMatch()->getRouteName();
  $node = \Drupal::routeMatch()->getParameter('node');

  switch ($route_name) {
    case 'entity.node.edit_form':
      _exclude_node_title_preprocess($vars, $node, 'nodeform');
      break;

    case 'entity.node.canonical':
      _exclude_node_title_preprocess($vars, $node, 'full');
      break;

   }
}

/**
 * Implements hook_preprocess_node().
 */
function exclude_node_title_preprocess_node(&$vars) {
  if (\Drupal::currentUser()->hasPermission('use exclude node title')) {
    _exclude_node_title_preprocess($vars, $vars['node'], $vars['view_mode']);
  }
}

/**
 * Remove the title from the variables array.  
 */
function _exclude_node_title_preprocess(&$vars, $node, $view_mode) {
  if (_exclude_node_title($node, $view_mode)) {
    $node_info = _exclude_node_title_var_get_node($node);
    $node_type = $node_info['node_type'];

    switch ($view_mode) {
      case 'nodeform':
        $node_types = node_type_get_names();
        if (!empty($vars['head_title'])) {
          $vars['head_title'] = t('Edit !nodetype', array('!nodetype' => $node_types[$node_type]));
        }
        else {
          $vars['title'] = t('Edit !nodetype', array('!nodetype' => $node_types[$node_type]));
        }
        break;

      default:
        if (!empty($vars['label'])) {
          $vars['label'][0]['#markup'] = '';
        }
        $vars['title'] = '';
        break;
    }
  }
}

/**
 * Implements hook_preprocess_search_result().
 */
function exclude_node_title_preprocess_search_result(&$vars) {
  $config = \Drupal::configFactory()->getEditable('exclude_node_title.settings');
  if (\Drupal::currentUser()->hasPermission('use exclude node title') && $config->get('exclude_node_title_search')) {
    $vars['title'] = '';
  }
}

/**
 * Implements hook_node_update().
 */
function exclude_node_title_node_update(node\NodeInterface $node) {
  if (exclude_node_title_check_perm($node)) {
    exclude_node_title_set_flag($node, $node->exclude_node_title);
  }
}

/**
 * Implements hook_node_insert().
 */
function exclude_node_title_node_insert(node\NodeInterface $node) {
  if (exclude_node_title_check_perm($node)) {
    exclude_node_title_set_flag($node, $node->exclude_node_title);
  }
}

/**
 * Implements hook_node_delete().
 */
function exclude_node_title_node_delete(node\NodeInterface $node) {
  if ($node->exclude_node_title == 1) {
    exclude_node_title_set_flag($node, 0);
  }
}

/**
 * Check permission to change node title exclusion.
 *
 * @param node\NodeInterface $node
 * @return bool
 */
function exclude_node_title_check_perm(node\NodeInterface $node) {
  $user = \Drupal::currentUser();

  if ($user->hasPermission('exclude any node title')) {
    return TRUE;
  }

  if ($user->hasPermission('exclude own node title') && $user->id() == $node->getOwnerId()) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_form_alter().
 */
function exclude_node_title_form_alter(&$form, &$form_state, $form_id) {
  $build_info = $form_state->getBuildInfo();

  if ($build_info['callback_object'] instanceof node\NodeForm) {
    $node = $build_info['callback_object']->getEntity();
    $node_type = $node->get('type')->getString();

    if (\Drupal::currentUser()->hasPermission('use exclude node title')) {
      if ('node_' . $node_type . '_edit_form' == $form_id && _exclude_node_title($node->id(), 'nodeform')) {
        $form['title']['#access'] = FALSE;
      }
    }

    // Make sure user have permissions correct.
    if (!exclude_node_title_check_perm($node)) {
      return FALSE;
    }

    // Don't bother to add form element if the content type isn't configured
    // to be excluded by user...
    if (_exclude_node_title_var_get('exclude_node_title_content_type_value.' . $node_type) == 'user') {
      $weight = $form['title']['#weight'] + 0.1;
      $form['exclude_node_title'] = array(
        '#type' => 'checkbox',
        '#field_name' => 'exclude_node_title',
        '#title' => t('Exclude title from display'),
        '#required' => FALSE,
        '#element_validate' => array('exclude_node_title_set_form_value'),
        '#default_value' => in_array($node->id(), _exclude_node_title_var_get('exclude_node_title_nid_list', array())),
        '#weight' => $weight,
      );

    }
  }
}

/**
 * Set exclude_node_title flag for the given node.
 */
function exclude_node_title_set_flag($node, $value = 1) {
  $exclude_list = _exclude_node_title_var_get('exclude_node_title_nid_list', array());
  $is_excluded = array_search($node->id(), $exclude_list);
  if ($value == 1 && $is_excluded === FALSE) {
    $exclude_list[] = $node->id();
    _exclude_node_title_var_set('exclude_node_title_nid_list', $exclude_list);
    return;
  }
  if ($value == 0 && $is_excluded !== FALSE) {
    unset($exclude_list[$is_excluded]);
    _exclude_node_title_var_set('exclude_node_title_nid_list', $exclude_list);
    return;
  }
}

/**
 * Implements hook_field_attach_delete_bundle().
 */
function exclude_node_title_field_attach_delete_bundle($entity_type, $bundle, $instances) {
  $config = \Drupal::configFactory()->getEditable('exclude_node_title.settings');

  // when deleting a content type, we make sure and clean our variable.
  if ($entity_type == 'node') {
    $config->delete('exclude_node_title_content_type_value.' . $bundle);
    $config->delete('exclude_node_title_content_type_modes.' . $bundle);
  }
}

/**
 * Tells if node should get hidden or not.
 * @param mixed $param
 *   Can be a node object or integer value (nid).
 * @return
 *   Returns boolean TRUE if should be hidden, FALSE when not.
 */
function _exclude_node_title($param, $view_mode = 'full') {
  // get exclude settings
  static $exclude_settings;

  if (!($node_info = _exclude_node_title_var_get_node($param))) {
    return FALSE;
  }

  $node_type = $node_info['node_type'];

  if (!isset($exclude_settings)) {
    foreach ($node_types = node_type_get_names() as $key => $val) {
      $exclude_settings[$key] = array(
        'type'  => _exclude_node_title_var_get('exclude_node_title_content_type_value.' . $key, 'none'),
        'modes' => unserialize(_exclude_node_title_var_get('exclude_node_title_content_type_modes.' . $key)),
      );
    }
  }

  if (!isset($exclude_settings[$node_type]['type'])) {
    return FALSE;
  }

  switch ($exclude_settings[$node_type]['type']) {
    case 'all':
      return !empty($exclude_settings[$node_type]['modes'][$view_mode]);
      break;

    case 'user':
      if (!$node_info['nid']) {
        return FALSE;
      }

      $nid = $node_info['nid'];

      // we look for the nid list
      $nid_exclude_list = _exclude_node_title_var_get('exclude_node_title_nid_list', array());
      $nid_list = array($nid => $nid);

      foreach ($nid_list as $item_nid) {
        if (in_array($item_nid, $nid_exclude_list)) {
          return !empty($exclude_settings[$node_type]['modes'][$view_mode]);
        }
      }

      return FALSE;
      break;
      
    case 'none':
    default:
      return FALSE;
      break;

  }
}

/**
 * Helper function to _exclude_node_title() that extracts
 * node information from $param.
 *
 * @param mixed $param
 *   Can be a node object or integer value (nid).
 * @return mixed
 *   Returns an array with node id and node type, or FALSE if there were errors.
 */
function _exclude_node_title_var_get_node($param) {
  $node_type = NULL;

  // we accept only integer and object
  if (!is_object($param) && !is_numeric($param)) {
    return FALSE;
  }

  // if numeric, load the node with nid
  if (is_numeric($param)) {
    $node = node\Entity\Node::load($param);
  }
  else {
    if (is_object($param) && $param instanceof node\NodeInterface) {
      $node = $param;
    }
  }

  if (isset($node)) {
    $node_type = $node->get('type')->getString();
  }

  if (!isset($node) || !isset($node->type)) {
    return FALSE;
  }

  return array('nid' => $node->id(), 'node_type' => $node_type);
}

/**
 * Implements hook_ds_fields_info_alter().
 */
function exclude_node_title_ds_fields_info_alter(&$fields, $entity_type) {
  if ($entity_type == 'node') {
    $fields['title']['function'] = '_exclude_node_title_ds_render_field';
    $fields['title']['properties']['settings']['exclude node title settings'] = array(
      'type' => 'select',
      'options' => array('No', 'Yes'),
      'description' => t('Use the settings for the Exclude Node Title module for the title. Set to "off" to always show title.'),
    );
    $fields['title']['properties']['default']['exclude node title settings'] = 1;
  }
}

/**
 * Render the field obeying exclude node title settings.
 */
function _exclude_node_title_ds_render_field($field) {
  $settings = isset($field['formatter_settings']) ? $field['formatter_settings'] : array();
  $settings += $field['properties']['default'];
  if ($settings['exclude node title settings'] && _exclude_node_title($field['entity']->nid, $field['view_mode'])) {
    $field['entity']->title = '';
  }
  return ds_render_field($field);
}

/**
 * Function getting exclude_node_title variables.
 */
function _exclude_node_title_var_get($variable, $default = NULL) {
  $config = \Drupal::configFactory()->getEditable('exclude_node_title.settings');

  if (!($value = $config->get($variable))) {
    $value = $default;
  }

  return $value;
}

/**
 * Function setting exclude_node_title variables
 */
function _exclude_node_title_var_set($variable, $value) {
  $config = \Drupal::configFactory()->getEditable('exclude_node_title.settings');
  $config->set($variable, $value)->save();

  return;
}

/**
 * Function setting node meta field value to make possible parsing it by hooks.
 */
function exclude_node_title_set_form_value($element, FormStateInterface $form_state, $form) {
  $values = $form_state->getValues();
  $build_info = $form_state->getBuildInfo();
  $node = $build_info['callback_object']->getEntity();
  $node->exclude_node_title = $values['exclude_node_title'];
}
