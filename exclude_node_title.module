<?php

/**
 * @file
 * Primarily Drupal hooks and global API functions to exclude node titles.
 *
 * This is the main module file for Exclude Node Title. 
 */

use Drupal\Component\Utility\Xss;
use Drupal\Core\Language\Language;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Database\Query\SelectInterface;
use Drupal\node\NodeTypeInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\Core\Template\Attribute;
use Drupal\file\Entity\File;
use Drupal\language\Entity\Language as LanguageEntity;
use Symfony\Cmf\Component\Routing\RouteObjectInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Field\FieldDefinition;

/**
 * Implements hook_permission().
 */ 
function exclude_node_title_permission() {
  return array(
    'administer exclude node title' => array(
      'title' => t('Administer exclude node title'),
    ),
    'exclude any node title' => array(
      'title' => t('Exclude any node title'),
    ),
    'exclude own node title' => array(
      'title' => t('Exclude own node title'),
    ),
    'use exclude node title' => array(
      'title' => t('Use exclude node title')
    ),
  );
}

/**
  * Implements hook_preprocess_page().
  */
function exclude_node_title_preprocess_page(&$vars) {
   if (!\Drupal::currentUser()->hasPermission('use exclude node title')) {
     return;
   }

  if (arg(0) == 'node' && is_numeric(arg(1))) {
    switch (arg(2)) {
      case 'edit':
        $view_mode = 'nodeform';
        break;
      case 'delete':
        return; // delete pages show you all information in title, we should not remove it
      default:
        $view_mode = 'full';
        break;
    }
    _exclude_node_title_preprocess($vars, arg(1), $view_mode);
  }
}

/**
 * Implements hook_preprocess_node().
 */
function exclude_node_title_preprocess_node(&$vars) {
  if (\Drupal::currentUser()->hasPermission('use exclude node title')) {
    _exclude_node_title_preprocess($vars, $vars['node'], $vars['view_mode']);
  }
}

/**
 * Remove the title from the variables array.  
 */
function _exclude_node_title_preprocess(&$vars, $node, $view_mode) {
  if (_exclude_node_title($node, $view_mode)) {
    list($nid, $node_type) = _exclude_node_title_var_get_node($node);

    if ($view_mode == 'nodeform') {
      $node_types = node_type_get_names();
      $vars['title'] = t('Edit !nodetype', array('!nodetype' => $node_types[$node_type]));
    } else {
      $vars['title'] = '';
    }
  }
}

/**
 * Implements hook_preprocess_search_result().
 */
function exclude_node_title_preprocess_search_result(&$vars) {
  $config = \Drupal::config('exclude_node_title.settings');
  if (\Drupal::currentUser()->hasPermission('use exclude node title') && $config->get('exclude_node_title_search')) {
    $vars['title'] = '';
  }
}

/**
 * Implements hook_node_update()
 */
function exclude_node_title_node_update($node) {
  if (!empty($node->get('title')->getString()) && exclude_node_title_check_perm($node)) {
    exclude_node_title_set_flag($node, $node->exclude_node_title);
  }
}

/**
 * Implements hook_node_insert()
 */
function exclude_node_title_node_insert($node) {
  if (!empty($node->get('title')->getString()) && exclude_node_title_check_perm($node)) {
    exclude_node_title_set_flag($node, $node->exclude_node_title);
  }
}

/**
 * Implements hook_node_delete()
 */
function exclude_node_title_node_delete($node) {
  if (!empty($node->get('title')->getString()) && $node->exclude_node_title == 1 ) {
    exclude_node_title_set_flag($node, 0);
  }
}

/**
 * Check permission to change node title exclusion.
 */
function exclude_node_title_check_perm($node) {
  global $user;
  if (\Drupal::currentUser()->hasPermission('exclude any node title'))
    return TRUE;
  if (\Drupal::currentUser()->hasPermission('exclude own node title'))
    return TRUE;
  return FALSE;
}

/**
 * Implements hook_form_alter().
 */
function exclude_node_title_form_alter(&$form, &$form_state, $form_id) {

  $node_type = !empty($form_state['form_display']->bundle) ? $form_state['form_display']->bundle : NULL;
  if (!empty($node_type) && ($node_type . '_node_edit_form' == $form_id || $node_type . '_node_form' == $form_id)) {
    // exclude for title

    if (\Drupal::currentUser()->hasPermission('use exclude node title')) {

      $node = $form_state['controller']->getEntity();
      if ($node_type . '_node_edit_form' == $form_id && _exclude_node_title($node->id(), 'nodeform')) {
        $form['title']['#access'] = FALSE;
      }
    }
    // --------------
    // make sure user have permissions correct
    if (!exclude_node_title_check_perm($node)) {
      return FALSE;
    }

    // don't bother to add form element if the content type isn't configured
    // to be excluded by user...
    if (_exclude_node_title_var_get('exclude_node_title_content_type_value_' . $node->get('type')->getString()) == 'user') {
      $weight = $form['title']['#weight'] + 0.1;
      $form['exclude_node_title'] = array(
        '#type' => 'checkbox',
        '#field_name' => 'exclude_node_title',
        '#title' => t('Exclude title from display'),
        '#required' => FALSE,
        '#element_validate' => array('exclude_node_title_set_form_value'),
        '#default_value' => in_array($node->id(), _exclude_node_title_var_get('exclude_node_title_nid_list', array())),
        '#weight' => $weight,
      );

      if (\Drupal::moduleHandler()->moduleExists('translation') && _exclude_node_title_var_get('exclude_node_title_translation_sync') == TRUE && translation_supported_type($node->get('type')->getString()) && !empty($nid)) {
        // get tnid
        $tnid = db_select('node', 'n')
          ->fields('n', array('tnid'))
          ->condition('nid', $nid)
          ->execute()
          ->fetchAssoc();
        if ($tnid['tnid'] != $nid) {
          $form['exclude_node_title']['#description'] = t("Check !here if you don't have title disabled in the source language of this node.", array('!here' => l(t('here'), 'node/' . $tnid['tnid'] . '/edit')));
        }
      }
    }
  }
}

/**
 * Set exclude_node_title flag for the given node.
 */
function exclude_node_title_set_flag($node, $value = 1) {

  $exclude_list = _exclude_node_title_var_get('exclude_node_title_nid_list', array());
  $nid = $node->id();
  $is_excluded = array_search($node->id(), $exclude_list);
  if ($value == 1 && $is_excluded === FALSE) {
    $exclude_list[] = $node->id();
    _exclude_node_title_var_set('exclude_node_title_nid_list', $exclude_list);
    return;
  }
  if ($value == 0 && $is_excluded !== FALSE) {
    unset($exclude_list[$is_excluded]);
    _exclude_node_title_var_set('exclude_node_title_nid_list', $exclude_list);
    return;
  }
}

/**
 * Implements hook_field_attach_delete_bundle().
 */
function exclude_node_title_field_attach_delete_bundle($entity_type, $bundle, $instances) {
  $config = \Drupal::config('exclude_node_title.settings');
  // when deleting a content type, we make sure and clean our variable :)
  if ($entity_type == 'node') {
    $config->delete('exclude_node_title_content_type_value_' . $bundle);
    $config->delete('exclude_node_title_content_type_modes_' . $bundle);
  }
}

/**
 * Tells if node should get hidden or not.
 * @param $param
 *   Can be a node object or integer value (nid)
 * @return
 *   Returns boolean TRUE if should be hidden, FALSE when not
 */
function _exclude_node_title($param, $view_mode = 'full') {

  list($nid, $node_type) = _exclude_node_title_var_get_node($param);
  
  // get exclude settings
  static $exclude_settings;
  if (!isset($exclude_settings)) {
    foreach ($node_types = node_type_get_names() as $key => $val) {
      $exclude_settings[$key] = array(
        'type'  => _exclude_node_title_var_get('exclude_node_title_content_type_value_' . $key, 'none'),
        'modes' => _exclude_node_title_var_get('exclude_node_title_content_type_modes_' . $key, array()),
      );
    }
  }

  switch ($exclude_settings[$node_type]['type']) {
    case 'all':
      return !empty($exclude_settings[$node_type]['modes'][$view_mode]);

    case 'user':
      if (!$nid)
        return FALSE;

      // we look for the nid list
      $nid_exclude_list = _exclude_node_title_var_get('exclude_node_title_nid_list', array());
      $nid_list = array($nid => $nid);

      if (\Drupal::moduleHandler()->moduleExists('translation') && _exclude_node_title_var_get('exclude_node_title_translation_sync') == TRUE && translation_supported_type($node_type)) {
        // get tnid
        $tnid = db_select('node', 'n')
          ->fields('n', array('tnid'))
          ->condition('nid', $nid)
          ->execute()
          ->fetchAssoc();
        $tlist = translation_node_get_translations($tnid['tnid']);

        if (is_array($tlist)) {
          foreach ($tlist as $tlang => $tnode) {
            $nid_list[$tnode->nid] = $tnode->nid;
          }
        }
      }

      foreach ($nid_list as $item_nid) {
        if (in_array($item_nid, $nid_exclude_list)) {
          return !empty($exclude_settings[$node_type]['modes'][$view_mode]);
        }
      }

      return FALSE;
      
    case 'none':

    default:
      return FALSE;
      break;
  }
}

/**
 * Helper function to _exclude_node_title() that extracts node information from $param.
 * @param $param
 *   Can be a node object or integer value (nid)
 * @return
 *   Returns an array with node id and node type, or FALSE if there were errors.
 */
function _exclude_node_title_var_get_node($param) {
    // we accept only integer and object
    if (!is_object($param) && !is_numeric($param)) {
        return FALSE;
    }

    // if numeric, load the node with nid
    if (is_numeric($param)) {
        $node = node_load(intval($param));
        if (!is_object($node)) {
            return FALSE;
        }
    }
    else if (is_object($param)) {
        $node = $param;
        unset($param); // memory cleanup
    }
    if (isset($node)) {
      $node_type = $node->get('type')->getString();
    }

    if (!isset($node) || !isset($node->type))
        return FALSE;

    $nid = !empty($node->id())? $node->id() : FALSE;
    unset($node); // memory cleanup

    return array($nid, $node_type);
}



/**
 * Implements hook_ds_fields_info_alter().
 */
function exclude_node_title_ds_fields_info_alter(&$fields, $entity_type) {
  if ($entity_type == 'node') {
    $fields['title']['function'] = '_exclude_node_title_ds_render_field';
    $fields['title']['properties']['settings']['exclude node title settings'] = array(
      'type' => 'select',
      'options' => array('No', 'Yes'),
      'description' => t('Use the settings for the Exclude Node Title module for the title. Set to "off" to always show title.'),
    );
    $fields['title']['properties']['default']['exclude node title settings'] = 1;
  }
}

/*
 * Render the field obeying exclude node title settings
 */
function _exclude_node_title_ds_render_field($field) {
  $settings = isset($field['formatter_settings']) ? $field['formatter_settings'] : array();
  $settings += $field['properties']['default'];
  if ($settings['exclude node title settings'] && _exclude_node_title($field['entity']->nid, $field['view_mode'])) {
    $field['entity']->title = '';
  }
  return ds_render_field($field);
}

/**
 * Function getting exclude_node_title variables
 */
function _exclude_node_title_var_get($variable, $default = NULL) {
  $config = \Drupal::config('exclude_node_title.settings');

  if (!($value = $config->get($variable))) {
    $value = $default;
  }

  return $value;
}

/**
 * Function setting exclude_node_title variables
 */
function _exclude_node_title_var_set($variable, $value) {
  $config = \Drupal::config('exclude_node_title.settings');
  $config->set($variable, $value)->save();

  return;
}

/**
 * Function setting node meta field value to make possible parsing it by hooks
 */
function exclude_node_title_set_form_value($element, &$form_state, $form) {
  $node = $form_state['controller']->getEntity();
  $node->exclude_node_title = $form_state['values']['exclude_node_title'];
}
